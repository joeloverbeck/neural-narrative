# src/concepts/algorithms/base_concept_algorithm.py

import logging
from typing import Generic, TypeVar, List, Optional

from src.base.required_string import RequiredString
from src.filesystem.filesystem_manager import FilesystemManager

logger = logging.getLogger(__name__)

TProduct = TypeVar("TProduct")
TFactory = TypeVar("TFactory")


class BaseConceptAlgorithm(Generic[TProduct, TFactory]):
    def __init__(
        self,
        playthrough_name: RequiredString,
        concept_factory: TFactory,
        filesystem_manager: Optional[FilesystemManager] = None,
    ):
        if not isinstance(playthrough_name, RequiredString):
            playthrough_name = RequiredString(playthrough_name)

        self._playthrough_name = playthrough_name
        self._concept_factory = concept_factory
        self._filesystem_manager = filesystem_manager or FilesystemManager()

    def do_algorithm(self) -> List[str]:
        product = self._concept_factory.generate_product()

        if not product.is_valid():
            error_message = (
                f"Failed to generate product from {self._concept_factory.__class__.__name__}. "
                f"Error: {product.get_error()}"
            )
            logger.error(error_message)
            raise ValueError(error_message)

        generated_items = product.get()

        if not generated_items:
            raise ValueError(
                f"No items were generated by {self._concept_factory.__class__.__name__}."
            )

        # Save generated items
        self.save_generated_items(generated_items)

        return generated_items

    def save_generated_items(self, items: List[RequiredString]):
        # Ensure that there are items to save.
        if not items:
            raise ValueError("There weren't items to save.")

        file_path = self.get_save_file_path()

        curated_items = []
        for item in items:
            if not item:
                raise ValueError(
                    f"Received a list with at least an invalid item: {items}"
                )
            if isinstance(item, RequiredString):
                curated_items.append(item)
            elif isinstance(item, str):
                curated_items.append(RequiredString(item))

        content = "\n".join(filter(None, [item.value for item in curated_items]))
        self._filesystem_manager.append_to_file(file_path, RequiredString(content))
        logger.info(f"Saved generated items to '{file_path}'.")

    def get_save_file_path(self) -> RequiredString:
        raise NotImplementedError("Subclasses must implement get_save_file_path.")
